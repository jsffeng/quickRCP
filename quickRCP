#!/bin/ksh

#########################################################################
# Descriptions: If you experienced several hours or even longer to ship #
#               a large file from one UNIX or Linux server to another,  #
#               try this script.                                        #
#                                                                       #
#               An example - the binary software delivery load need to  #
#               be shipped from one country to another periodically for #
#               a global development team.                              #
#                                                                       #
#	        Author: Jason Feng                                      #
#                                                                       #
#########################################################################

############  Sub functions ############ 
function usage
{
	if (( ${#} > 0 ))
	then
		print -u2 "Error: ${CMD_NAME}: ${@}"
	fi
	print "${USAGE}"
	exit ${#}
}

function LogMessage
{
	print $@
}

function DebugMessage
{
	if [[ -f ${DEBUG} ]]
	then
		print $@
	fi
}

# Set $1 as 0 for normal completion, otherwise for abormal completion
function ResourceRelease 
{
	if [[ $__SOLARIS__ == "YES" ]]
	then
		if ((trap_count != 0))
		then
			exit 1
		fi
	fi

	
	if [[ $__LINUX__ == "YES" ]]
	then
		if [[ ${1} != 0 ]]
		then
			#ps --ppid $$| awk '{if($1~/[0-9]+/) print $1}'| xargs kill -9 >/dev/null 2>&1
			pstree $$ -p  | tr "(" "\n" |tr ")" "\n" | awk '{if ($1~/[0-9]+/) print $1}' |xargs kill -9  >/dev/null 2>&1
		fi
	fi

	if [[ ! -f ${DEBUG} ]]
	then
		# Release resource, in case ssh requiring password use RSH_FLAGS here
		${RSH} ${RSH_FLAGS} ${REMOTE_SERVER} -l ${USER_ID} rm -rf ${DESTDIR}/.ship* 2>/dev/null
		cd ${TEMP_WORKDIR}
		rm -rf $TEMP
                cd ${CUR_DIR}
	else
		# Do nothing but remove DEBUG flag file
		rm -f $DEBUG
		print "\nINFO:${TEMP} and ${DESTTEMP} on ${REMOTE_SERVER} are kept for debugging purpose."
		print "Please ensure to manually remove them after debugging."
	fi

	if [[ $__SOLARIS__ == "YES" ]]
	then
		let trap_count=trap_count+1
	fi
}

# Before resource allocated, don't use 99 as exit code
function EXIT
{
	if [[ ${1} == 99 ]]
	then
		ResourceRelease
	fi

	print
	exit ${1}
}

function ReadStat
{
	RCPSTAT_T=$(cat $1)
	if [[ -z $(echo ${RCPSTAT_T}|grep ";" 2>/dev/null) ]]
	then
		RCPSTAT=${RCPSTAT_T}
		RCP_PID=AAAAA
	else
		RCPSTAT=${RCPSTAT_T%%\;*}
		RCP_PID=${RCPSTAT_T##*\;}
	fi
}

function WriteStat
{
	DebugMessage "${1} has been changed in ${2}"
	if [[ -z ${3} ]]
	then
		print "${2}" > ${1}
	else
		print "${2};${3}" > ${1}
	fi
}

function ErrorHandle
{
	print "ERROR: Error type is ${1}"
	ResourceRelease
}

############  Verify you are on Linux or Solaris  ############ 
MACHINE=$(uname -a)
export __LINUX__=NO
export __SOLARIS__=NO
if [[ -n $(echo ${MACHINE}|grep -i Linux 2>/dev/null) ]]
then
	__LINUX__=YES
elif [[ -n $(echo ${MACHINE}|grep -i SunOS 2>/dev/null) ]]
then
	__SOLARIS__=YES
else
	print "ERROR:You are running it neither on Linux nor Solaris machine, please test it and modify the tool before using!"
	exit 1
fi

############  Command Interface Module  ############ 
export CMD_NAME=${0##*/}

USAGE="
USAGE:  ${CMD_NAME} -f <file name> [-h <remote host>]
		[-u <remote login>] [-d <remote dir>]
		[-c <remote login>@<remote host>:<remote dir>]
		[-m <method>] [-t <time>] [-M <split mode>]
		[-N <split number>] [-S <split size>]
		[-T] [-H]

Regular options:
	-f 	file name for shipping,required option
	-h	remote host name or IP
	-u	remote login
	-d	remote directory
	-c	if this option is used, option -h,-u,-d should not be used
	-T	test mode, only used by tool adminstrator for quick debugging 
	-H	print usage message

Alternative options:
	-m	shipping mothod, valid value is [rcp|scp]
	-t	seconds for periodical checks for shipping completion
	-M	split mode, valid value is [NUMBER|SIZE] on Linux. On Solaris, only SIZE supported
	-N	split number, when -M specify NUMBER, split input file with this number, example 10
	-S	byte of split size, when -M specify SIZE, split input file with this size, example 100m 

Note: 	All alternative options have default value in Config file, and can be used to 
	overwrite the default value by command line. However, to update Config file 
	with new default value may be a simpler way to achieve the same.

Examples:
	 ${CMD_NAME} -f file1.cpio -h 192.168.1.90 -u username -d /usr/tmp -m scp
	 ${CMD_NAME} -f file1.cpio -c username@192.168.1.90:/usr/tmp
"

unset 	\
	INPUTFILE		\
	REMOTE_SERVER		\
	USER_ID			\
	DESTDIR			\
	REMOTE_ACCESS		\
	RemoteCopyMethod	\
	TIMER			\
	SPLIT_MODE		\
	SPLIT_NUMBER		\
	SPLIT_SIZE		\
	TESTMODE

CUR_DIR=${PWD}

if [[ -z "$@" ]]
then
	usage "options missing!"
fi

if [[ -z $(echo ${0} |grep "/" 2>/dev/null) ]]
then
	ENV_SET=Config
	RCP_SCR=RCP
else
	CUR_TOOLDIR=$(dirname ${0} 2>/dev/null)
        ENV_SET=${CUR_TOOLDIR}/Config
	RCP_SCR=${CUR_TOOLDIR}/RCP
fi

export PATH
export RemoteCopyMethod
export TESTMODE

. ${ENV_SET}

if [[ -z ${CONNECT_TIMEOUT} || ! -z $(echo ${CONNECT_TIMEOUT}|sed "s/[0-9]//g" 2>/dev/null) ]]
then
	LogMessage "ERROR: Illegal value for CONNECT_TIMEOUT in Config file!"
	EXIT 1
fi

OPT_PASS=YES
integer opt_num=0
integer opt_combine_num=0

while getopts :f:h:u:d:c:m:t:M:N:S:TH? OPT
do
	case ${OPT} in
	f)	INPUTFILE=${OPTARG}
		;;
	h)	REMOTE_SERVER=${OPTARG}
		let opt_num=opt_num+1
		;;
	u)	USER_ID=${OPTARG}
		let opt_num=opt_num+1
		;;
	d)	DESTDIR=${OPTARG}
		let opt_num=opt_num+1
		;;
	c)	REMOTE_ACCESS=${OPTARG}
		let opt_combine_num=opt_combine_num+1
		;;
	m)	RemoteCopyMethod=${OPTARG}
		;;
	t)	TIMER=${OPTARG}
		;;
	M)	SPLIT_MODE=${OPTARG}
		;;
	N)	SPLIT_NUMBER=${OPTARG}
		;;
	S)	SPLIT_SIZE=${OPTARG}
		;;
	T)	TESTMODE=-T
		# Will be a quicker way to test with shipping fake files in much smaller size
		# This is to save debugging time by not shipping a real large file
		;;
	H)	usage
		;;
	:)	usage option -$OPTARG requires an argument.
		;;
	?)	usage unknown option: -$OPTARG
		;;
	esac
done

shift $(($OPTIND - 1))

if [[ ! -z "$@" ]]
then
	usage unknown option: "$@"	
fi

# Perform validity checks

if [[ -z ${INPUTFILE} ]]
then
	usage "option '-f <file name>' always required!"
elif [[ ! -f ${INPUTFILE} ]]
then
	LogMessage "ERROR: File ${INPUTFILE} doesn't exist!"
	EXIT 1
fi

if (( opt_combine_num == 0 ))
then
	if (( opt_num !=3 ))
	then
		usage "options missing!"
	fi
elif (( opt_combine_num == 1 ))
then
	if (( opt_num !=0 ))
	then
		usage "options conflict!"
	fi

	if [[ -n $(echo ${REMOTE_ACCESS} | grep @ 2>/dev/null) && -n $(echo ${REMOTE_ACCESS} | grep : 2>/dev/null) ]]
	then
		USER_ID=${REMOTE_ACCESS%%@*}
		REST_REMOTE_ACCESS=${REMOTE_ACCESS##*@}
		REMOTE_SERVER=${REST_REMOTE_ACCESS%%:*}
		DESTDIR=${REST_REMOTE_ACCESS##*:}
	else
		usage "bad -c argument!"
	fi
else
	# Should not reach here
	usage "bad options!"
fi

if [[ -z ${REMOTE_SERVER} || -z ${USER_ID} || -z ${DESTDIR} ]]
then
	usage "wrong options!"
fi

if [[ ${RemoteCopyMethod} == "scp" ]]
then
	RSH=ssh
	export RCP_CMD=scp
elif [[ ${RemoteCopyMethod} == "rcp" ]]
then
	RSH=rsh
	export RCP_CMD=rcp
else
	LogMessage "ERROR: RemoteCopyMethod cannot be any other value except scp or rcp!"
	EXIT 1
fi

if [[ -z ${TIMER} || ! -z $(echo ${TIMER}|sed "s/[0-9]//g" 2>/dev/null) ]]
then
	LogMessage "ERROR: TIMER must be a natural number!"
	EXIT 1
fi

integer timer=${TIMER}

if (( timer < 2 ))
then
	LogMessage "ERROR: TIMER must be a natural number greater than or equal to 2 seconds!"
	EXIT 1
fi

if [[ ${SPLIT_MODE} == "NUMBER" ]]
then
	if [[ $__SOLARIS__ == "YES" ]]
	then
		LogMessage "ERROR: SPLIT_MODE cannot be NUMBER in Solaris!"
		EXIT 1
	fi

	if [[ -z ${SPLIT_NUMBER} || ! -z $(echo ${SPLIT_NUMBER}|sed "s/[0-9]//g" 2>/dev/null) ]]
	then
		LogMessage "ERROR: SPLIT_NUMBER must be a natural number!"
		EXIT 1
	fi
elif [[ ${SPLIT_MODE} == "SIZE" ]]
then
	SIZE_SUFIX=$(echo ${SPLIT_SIZE} |sed "s/\(.*\)\(.\)$/\2/" 2>/dev/null)
	
	if [[ -n $(echo ${SIZE_SUFIX}|grep [0-9] 2>/dev/null) ]]
	then
		SIZE_VALUE=${SPLIT_SIZE}
	elif [[ -n $(echo ${SIZE_SUFIX} |grep [k,m] 2>/dev/null) ]]
	then
		SIZE_VALUE=${SPLIT_SIZE%${SIZE_SUFIX}}
	else
		LogMessage "ERROR: Invalid SPLIT_SIZE, e.g. 100000000,100000k,100m!"
		EXIT 1
	fi
	
	if [[ -z ${SIZE_VALUE} || ! -z $(echo ${SIZE_VALUE}|sed "s/[0-9]//g" 2>/dev/null) ]]
	then
		LogMessage "ERROR: Invalid SPLIT_SIZE, e.g. 100000000,100000k,100m!"
		EXIT 1
	fi
else
	LogMessage "ERROR: SPLIT_MODE cannot be any other value except NUMBER or SIZE!"
	EXIT 1
fi

############  Preparation Module  ############ 
LogMessage "${CMD_NAME} started in $(date)"

export DEBUG=$HOME/${CMD_NAME}.debug

if [[ -d ${TEMP_WORKDIR} ]]
then
	export TEMP=${TEMP_WORKDIR}/split$$.$(date +%m%d)
	export TEMPRCP=${TEMP}/.rcp
	export TEMPRCPDEBUG=${TEMP}/.rcpdebug
else
	LogMessage "ERROR: Directory ${TEMP_WORKDIR} doesn't exist! Please correct it in Config file!"
	EXIT 1
fi

DESTTEMP=${DESTDIR}/.ship$$.$(date +%m%d)
FILENAME=$(basename ${INPUTFILE} 2>/dev/null) 
FILEPATH=$(dirname ${INPUTFILE} 2>/dev/null)

# "sum -r" output format is different between Linux and Solaris
# Just use the first field sum value and remove the rest
ORIG_SUM_T=$(sum -r  ${FILEPATH}/${FILENAME} 2>/dev/null )
ORIG_SUM=${ORIG_SUM_T%% *}

DebugMessage "ORIG_SUM is ${ORIG_SUM}"

if [[ ${RSH} == ssh ]]
then
	RSH_FLAGS="-o PreferredAuthentications=publickey -o StrictHostKeyChecking=no -o ConnectTimeout=${CONNECT_TIMEOUT}"
else
	# For rsh, freeBSD version support -t timeout option, 
	# while on solaris, no timeout option is supported. 
	# So just leave it empty to ensure compatible.
	RSH_FLAGS=
fi

if [[ $__SOLARIS__ == "YES" ]]
then
	integer trap_count=0
fi

# On Solaris, kill 0 can terminate all children processes, but it will cause trap fall into infinite 
# loop, so quit from ResourceRelease if it was called the second time.
# On Linux, looks kill 0 will do nothing, just rely on ResourceRelease to kill all children processess.
trap "ResourceRelease;kill 0;exit 1" 1 2 3 15 

if [[ ! -z ${TESTMODE} ]]
then
	touch $DEBUG
else
	[ -f $DEBUG ] && rm -f $DEBUG
fi

# Verify if remote operation is OK
${RSH} ${RSH_FLAGS} ${REMOTE_SERVER} -l ${USER_ID} date > /dev/null 2>&1

if [[ $? != 0 ]]
then
	LogMessage "ERROR: Can't run \"${RSH} ${RSH_FLAGS} ${REMOTE_SERVER} -l ${USER_ID} date\" successfully! Please setup ${RSH} access with no passwd required!\n"
	EXIT 1
fi

mkdir -p ${TEMP} 

if [[ ! -d ${TEMP} ]]
then
	LogMessage "ERROR: Can't create ${TEMP}!"
	EXIT 1
fi

# Verify if the remote directory is accessible or workable for scp or rcp.
echo "# Remote RCP" > ${TEMP}/.rcp_test
${RCP_CMD} ${TEMP}/.rcp_test ${USER_ID}@${REMOTE_SERVER}:${DESTDIR}/ > /dev/null 2>&1

if [[ $? != 0 ]]
then
	LogMessage "ERROR: Can't run \"${RCP_CMD} ${TEMP}/.rcp_test ${USER_ID}@${REMOTE_SERVER}:${DESTDIR}/\" successfully! Please verify if remote directory is ${DESTDIR}/ accessible!\n"
	EXIT 99
else
	${RSH} ${REMOTE_SERVER} -l ${USER_ID} rm -rf ${DESTDIR}/.rcp_test 2>/dev/null
fi

mkdir -p ${TEMPRCP}
mkdir -p ${TEMPRCPDEBUG}

${RSH} ${REMOTE_SERVER} -l ${USER_ID} rm -rf ${DESTDIR}/.ship* 2>/dev/null
${RSH} ${REMOTE_SERVER} -l ${USER_ID} mkdir -p ${DESTTEMP} 2>/dev/null

if [[ -z $(${RSH} ${REMOTE_SERVER} -l ${USER_ID} ls -d ${DESTTEMP} 2>/dev/null) ]]
then
	LogMessage "ERROR: Can't run ${RSH} successfully!"
	EXIT 99
fi

if [[ -z $TESTMODE ]]
then
        if [[ ${SPLIT_MODE} == "SIZE" ]] 
	then
		split -b ${SPLIT_SIZE} ${FILEPATH}/${FILENAME} ${TEMP}/${FILENAME}
	else
		split -n ${SPLIT_NUMBER} ${FILEPATH}/${FILENAME} ${TEMP}/${FILENAME}
	fi
else
	for x in a b c d
	do
		print "Test mode ${x}" > ${TEMP}/${FILENAME}${x}
	done
fi

# Number for splitting files
integer NUM

cd $TEMP
NAMELIST=$(ls ${FILENAME}* 2>/dev/null)
NUM=$(ls ${FILENAME}* 2>/dev/null |wc -l)

if (( NUM == 0 ))
then
	LogMessage "ERROR: split failed!"
	EXIT 99
fi

cd ${CUR_DIR}

DebugMessage "${FILENAME} were splitted as ${NAMELIST}!"

for i in ${NAMELIST}
do
	WriteStat ${TEMPRCP}/${i} "NS"
done

############  Split & RCP Module  ############ 
DebugMessage "Start Split & ${RCP_CMD} in $(date)"

integer success
integer notstart
integer inprog
integer fail=0
integer fatal=0
integer MAX_FAILURE=3
RCPSTAT=
RCP_PID=AAAAA

DebugMessage "Split files number is ${NUM}"

while true
do
	success=0
	notstart=0
	inprog=0

	for i in ${NAMELIST}
	do
		ReadStat ${TEMPRCP}/$i
		case ${RCPSTAT} in
		    NS) 
			let notstart=notstart+1
			DebugMessage "Background running ${RCP_SCR} ${TEMP}/${i} ${USER_ID}@${REMOTE_SERVER}:${DESTTEMP}, go to ${TEMPRCPDEBUG} for more details"
			${RCP_SCR} ${TEMP}/${i} ${USER_ID}@${REMOTE_SERVER}:${DESTTEMP} >/dev/null 2>&1 &
		     	;;	
		    IP)
			if [[ -d /proc/${RCP_PID} ]]
			then
				# Process is alive
				let inprog=inprog+1
			else
				# Process has died
				let fail=fail+1
				DebugMessage "Background running ${RCP_SCR} ${TEMP}/${i} ${USER_ID}@${REMOTE_SERVER}:${DESTTEMP}, go to ${TEMPRCPDEBUG} for more details"
				${RCP_SCR} ${TEMP}/${i} ${USER_ID}@${REMOTE_SERVER}:${DESTTEMP} >/dev/null 2>&1 &
			fi
			;;	
		    FAIL)
			let fail=fail+1
			DebugMessage "Background running ${RCP_SCR} ${TEMP}/${i} ${USER_ID}@${REMOTE_SERVER}:${DESTTEMP}, go to ${TEMPRCPDEBUG} for more details"
			${RCP_SCR} ${TEMP}/${i} ${USER_ID}@${REMOTE_SERVER}:${DESTTEMP} >/dev/null 2>&1 &
			;;	
        	    CO)
			let success=success+1
			;;	
		    *)	
			DebugMessage "ERROR: Abnormal RCPSTAT=${RCPSTAT}!"
			let fatal=fatal+1
			;;	
		esac
	done

	DebugMessage "NS=${notstart} IP=${inprog} CO=${success} FAIL=${fail} FATAL=${fatal}"

	if (( success < NUM && fail < MAX_FAILURE && fatal == 0 ))
	then
		sleep ${TIMER}
	else
		break
	fi
done

DebugMessage "End Split & rcp in $(date)"

############  Post-processing Module ############ 
DebugMessage "Start Post process in $(date)"

if (( success == NUM ))
then
# Merge remotely	
	DebugMessage "Running: ${RSH} ${REMOTE_SERVER} -l ${USER_ID} \"cat ${DESTTEMP}/${FILENAME}* > ${DESTDIR}/${FILENAME}\" 2>/dev/null"
	${RSH} ${REMOTE_SERVER} -l ${USER_ID} "cat ${DESTTEMP}/${FILENAME}* > ${DESTDIR}/${FILENAME}" 2>/dev/null
elif (( fail == MAX_FAILURE ))
then
	ErrorHandle 1 
	EXIT 1
elif (( fatal != 0 ))
then
	ErrorHandle 2
	EXIT 1

else
	ErrorHandle 3 
	EXIT 1
fi

# Sum Checking
if [[ -z $TESTMODE ]]
then
 	# "sum -r" output format is different between Linux and Solaris
	# Just use the first field sum value and remove the rest
	NEW_SUM_T=$(${RSH} ${REMOTE_SERVER} -l ${USER_ID} sum -r ${DESTDIR}/${FILENAME}  2>/dev/null)
	NEW_SUM=${NEW_SUM_T%% *}
	DebugMessage "NEW_SUM is ${NEW_SUM}"
	if [[ ${ORIG_SUM} == ${NEW_SUM} ]]
	then
		LogMessage "${FILENAME} was successfully shipped!"
	else
		LogMessage "ERROR: Sum value of ${FILENAME} didn't match, Please investigate!"
		EXIT 99
	fi
else
	DebugMessage "Test mode skip sum checking"
fi

DebugMessage "End Post process in $(date)"

ResourceRelease 0

LogMessage "${CMD_NAME} completed in $(date)"

EXIT 0
